Leet Code 
Q1.

Brute Force Solutin:

class Solution(object):
    def twoSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        for i in range(len(nums)):
            a1 = nums[i]
            a2 = target-a1
            for j in range(i+1,len(nums)):
                if a2==nums[j]:
                    return [i,j]


HeapMap Solution:

class Solution(object):
    def twoSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        n = len(nums)
        dic = {}
        for i in range(n):
            d = target-nums[i]
            if d in dic:
                return [i,dic[d]]
            dic[nums[i]]=i


2 Pointers Solution:

This algorithm is only for unique data

class Solution(object):
    def twoSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        n = len(nums)
        i = 0
        j = n - 1
        arr = nums[:]
        arr.sort()
        while i<j:
            if target == arr[i] + arr[j]:
                return [nums.index(arr[i]),nums.index(arr[j])]
            elif target > arr[i] + arr[j]:
                i += 1
            else :
                j -= 1
        return [-1]


        
        
        
        